// Ease App - Prisma Schema
// Compassionate journaling app for processing worries and reflections

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  hashedPassword String? @map("hashed_password")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts   Account[]
  sessions   Session[]
  worries    Worry[]
  reflections Reflection[]
  settings   UserSettings?

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core app models
model Worry {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String
  description String?  @db.Text
  category    String   // School, Work, Family, Finance, Politics, etc.
  bodyFeeling String?  @map("body_feeling") // Where they feel it in their body
  intensity   Int      @default(5) // 1-10 scale
  status      WorryStatus @default(ACTIVE)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  scheduledAt DateTime? @map("scheduled_at") // For "Hold for Worry Time"

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reflections Reflection[]

  @@map("worries")
}

model Reflection {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  worryId   String?  @map("worry_id") // Optional - can have general reflections
  
  // Worry Circle reflection questions
  evidenceFor     String? @db.Text @map("evidence_for")     // "Why does this feel so true to me?"
  evidenceAgainst String? @db.Text @map("evidence_against") // "What might my wiser self say?"
  alternativeView String? @db.Text @map("alternative_view") // "Could there be another story here?"
  worstCaseReality String? @db.Text @map("worst_case_reality") // "What am I most afraid of and how real is it?"
  gentleAction    String? @db.Text @map("gentle_action")    // "What is one gentle thing I can do?"
  
  // Daily reflection summary
  feelingNow      String? @map("feeling_now")      // Emoji check-in
  whatHelped      String? @db.Text @map("what_helped")
  whatDidntFeel   String? @db.Text @map("what_didnt_feel") 
  realizations    String? @db.Text
  celebrations    String? @db.Text
  
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  worry Worry? @relation(fields: [worryId], references: [id], onDelete: SetNull)

  @@map("reflections")
}

model UserSettings {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  reflectionTime   String   @default("17:00") @map("reflection_time") // Default 5 PM
  customCategories String[] @default([]) @map("custom_categories")
  notifications    Boolean  @default(true)
  darkMode         Boolean  @default(false) @map("dark_mode")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Enums
enum WorryStatus {
  ACTIVE
  ARCHIVED
  SCHEDULED
  RESOLVED
}
